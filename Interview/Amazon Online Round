
Let S be a stack of size n >= 1. Starting with the empty stack, suppose we push the first n natural numbers in sequence, and then perform n pop operations. Assume that Push and Pop operation take X seconds each, and Y seconds elapse between the end of one such stack operation and the start of the next operation. For m >= 1, define the stack-life of m as the time elapsed from the end of Push(m) to the start of the pop operation that removes m from S. The average stack-life of an element of this stack is

Max. Marks 10.0 
 n(X+ Y)
 3Y + 2X
 n(X + Y)-X 
 Y + 2X




What is the maximum height of any AVL-tree with 7 nodes? Assume that the height of a tree with a single node is 0.

Max. Marks 10.0 
 2
 3
 4
 5




A complete n-ary tree is a tree in which each node has n children or no children. Let I be the number of internal nodes and L be the number of leaves in a complete n-ary tree. If L = 41, and I = 10, what is the value of n?

Max. Marks 10.0 
 3
 4
 5
 6



The inorder and preorder traversal of a binary tree are d b e a f c g and a b d e c f g, respectively. The postorder traversal of the binary tree is:

Max. Marks 10.0 
 d e b f g c a
 e d b g f c a
 e d b f g c a
 d e f g b c a



 In an arbitrary tree ( not a search tree) of order M. Its size is N, and its height is K. The computation time needed to find a data item on T is

Max. Marks 10.0 
 O(K*K)
 O(M*M)
 O(N)
 O( 1 ).


 Consider a hash table of size seven, with starting index zero, and a hash function (3x + 4)mod7. Assuming the hash table is initially empty, which of the following is the contents of the table when the sequence 1, 3, 8, 10 is inserted into the table using closed hashing? Note that ‘_’ denotes an empty location in the table.

Max. Marks 10.0 
 8, _, _, _, _, _, 10
 1, 8, 10, _, _, _, 3
 1, _, _, _, _, _,3
 1, 10, 8, _, _, _, 3



What is the maximum height of any AVL-tree with 7 nodes? Assume that the height of a tree with a single node is 0.

Max. Marks 10.0 
 2
 3
 4
 5



An 8KB direct mapped write-back cache is organized as multiple blocks, each of size 32-bytes. The processor generates 32-bit addresses. The cache controller maintains the tag information for each cache block comprising of the following.

1 Valid bit
1 Modified bit
As many bits as the minimum needed to identify the memory block mapped in the cache. What is the total size of memory needed at the cache controller to store metadata (tags) for the cache?

Max. Marks 10.0 
 5376 bits
 4864 bits
 6144 bits
 6656 bits


If the Disk head is located initially at 32, find the number of disk moves required with FCFS if the disk queue of I/O blocks requests are 98,37,14,124,65,67.

Max. Marks 10.0 
 310
 315
 321
 324




Let the page fault service time be 10ms in a computer with average memory access time being 20ns. If one page fault is generated for every 106 memory accesses, what is the effective access time for the memory?

Max. Marks 10.0 
 21 ns
 30 ns
 23 ns
 35 ns



T is a search tree of order M, its size is N, and its height is K. The computation time needed to INSERT/DELETE a data item on T is

Max. Marks 10.0 
 O( 1 )
 O( M )
 O( Log K )
 O( K ).




In an arbitrary tree ( not a search tree) of order M. Its size is N, and its height is K. The computation time needed to find a data item on T is

Max. Marks 10.0 
 O(K*K)
 O(M*M)
 O(N)
 O( 1 ).










Chandu and his Gurudevs
Max. Marks 100
Chandu is a problem setter at HackerEarth. He used to call all his seniors, Gurudev. Once Gurudevs realized Chandu is getting lazy, and they asked to him to set a problem. So he came up with a problem. He explained the problem to Gurudevs.

Given a undirected graph G with N nodes. The graph G has 2 properties:

G is connected
G has N-1 edges
Then he defined a function F such that F(a, b) is equal to the maximum edge weight in the path from a to b.

Now the problem is quite simple. We need to find the sum of the F(a, b) for all a, b such that 1 <= a, b <= N (mod 109 + 7).

As we all know that Chandu is lazy. Chandu submitted the problem but he did not submit the solution of the problem. So he asked you to write the solution for him.

Input:
First line contains an integer T, number of test cases.
First line of each test case consists of an integer N, number of nodes.
Next N-1 lines follows. ith line contains three space separated integers ai, bi and ci which denotes that there is an edge from ai to bi with edge weight ci.

Output:
For each test case print a single integer that is equal to the sum of the F(a, b) for all a, b such that 1 <= a, b <= N (mod 109 + 7).

Constraints:
1 <= T <= 105
1 <= N <= 2 * 105
0 <= ci <= 108
1 <= ai, bi <= N
sum of N over all the testcases will be <= 2 * 106

Sample Input(Plaintext Link)
 1
5
1 2 2
2 3 1
2 4 4
4 5 3
Sample Output(Plaintext Link)
 32
Explanation
enter image description here

F(a, b) is equal to the maximum edge weight in the path from a to b.

F(1, 2) = 2
F(1, 3) = 2
F(1, 4) = 4
F(1, 5) = 4
F(2, 3) = 1
F(2, 4) = 4
F(2, 5) = 4
F(3, 4) = 4
F(3, 5) = 4
F(4, 5) = 3

Answer = F(1, 2) + F(1, 3) + F(1, 4) + F(1, 5) + F(2, 3) + F(2, 4) + F(2, 5) + F(3, 4) + F(3, 5) + F(4, 5)
= 2 + 2 + 4 + 4 + 1 + 4 + 4 + 4 + 4 + 3 = 32





Akash and GCD 1
Max. Marks 100
Akash is interested in a new function F such that,

F(x) = GCD(1, x) + GCD(2, x) + ... + GCD(x, x)

where GCD is the Greatest Common Divisor.
Now, the problem is quite simple. Given an array A of size N, there are 2 types of queries:
1. C X Y : Compute the value of F( A[X] ) + F( A[X + 1] ) + F( A[X + 2] ) + .... + F( A[Y] ) (mod 10^9 + 7)
2. U X Y: Update the element of array A[X] = Y

Input:
First line of input contain integer N, size of the array.
Next line contain N space separated integers the elements of A.
Next line contain integer Q, number of queries.
Next Q lines contain one of the two queries.

Output:
For each of the first type of query, output the required sum (mod 10^9 + 7).

Constraints:
1 <= N <= 106
1 <= Q <= 105
1 <= Ai <= 5*105

For Update ,
1 <= X <= N
1 <= Y <= 5*105

For Compute ,
1 <= X <= Y <= N

Sample Input(Plaintext Link)
 3
3 4 3
6
C 1 2
C 1 3
C 3 3
U 1 4
C 1 3
C 1 2
Sample Output(Plaintext Link)
 13
18
5
21
16
Explanation
A[1] = 3, A[2] = 4, A[3] = 3
F(3) = GCD(1, 3) + GCD(2, 3) + GCD(3, 3) = 1 + 1 + 3 = 5.
F(4) = GCD(1, 4) + GCD(2, 4) + GCD(3, 4) + GCD(4, 4) = 1 + 2 + 1 + 4 = 8.

First query, the sum will be F(3) + F(4) = 5 + 8 = 13 (mod 10^9 + 7).
Second query, the sum will be F(3) + F(4) + F(3) = 5 + 8 + 5 = 18 (mod 10^9 + 7).
Third query, the sum will be F(3) = 5 (mod 10^9 + 7).
Fourth query will update A[1] = 4.
Fifth query, the sum will be F(4) + F(4) + F(3) = 8 + 8 + 5 = 21 (mod 10^9 + 7).
Sixth query, the sum will be F(4) + F(4) = 8 + 8 = 16 (mod 10^9 + 7).

